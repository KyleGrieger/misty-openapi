# coding: utf-8

"""
    Misty API

    Misty Open API  # noqa: E501

    The version of the OpenAPI document: 1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class ApiDeviceResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'robot_id': 'object',
        'serial_number': 'object',
        'current_profile_name': 'object',
        'hardware_info': 'object',
        'ip_address': 'object',
        'battery_level': 'object',
        'occipital_device_info': 'object',
        'output_capabilities': 'list[object]',
        'robot_version': 'object',
        'sensory_service_app_version': 'object',
        'windows_os_version': 'object',
        'sensor_capabilities': 'list[object]'
    }

    attribute_map = {
        'robot_id': 'robotId',
        'serial_number': 'serialNumber',
        'current_profile_name': 'currentProfileName',
        'hardware_info': 'hardwareInfo',
        'ip_address': 'ipAddress',
        'battery_level': 'batteryLevel',
        'occipital_device_info': 'occipitalDeviceInfo',
        'output_capabilities': 'outputCapabilities',
        'robot_version': 'robotVersion',
        'sensory_service_app_version': 'sensoryServiceAppVersion',
        'windows_os_version': 'windowsOSVersion',
        'sensor_capabilities': 'sensorCapabilities'
    }

    def __init__(self, robot_id=None, serial_number=None, current_profile_name=None, hardware_info=None, ip_address=None, battery_level=None, occipital_device_info=None, output_capabilities=None, robot_version=None, sensory_service_app_version=None, windows_os_version=None, sensor_capabilities=None, local_vars_configuration=None):  # noqa: E501
        """ApiDeviceResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._robot_id = None
        self._serial_number = None
        self._current_profile_name = None
        self._hardware_info = None
        self._ip_address = None
        self._battery_level = None
        self._occipital_device_info = None
        self._output_capabilities = None
        self._robot_version = None
        self._sensory_service_app_version = None
        self._windows_os_version = None
        self._sensor_capabilities = None
        self.discriminator = None

        if robot_id is not None:
            self.robot_id = robot_id
        if serial_number is not None:
            self.serial_number = serial_number
        if current_profile_name is not None:
            self.current_profile_name = current_profile_name
        if hardware_info is not None:
            self.hardware_info = hardware_info
        if ip_address is not None:
            self.ip_address = ip_address
        if battery_level is not None:
            self.battery_level = battery_level
        if occipital_device_info is not None:
            self.occipital_device_info = occipital_device_info
        if output_capabilities is not None:
            self.output_capabilities = output_capabilities
        if robot_version is not None:
            self.robot_version = robot_version
        if sensory_service_app_version is not None:
            self.sensory_service_app_version = sensory_service_app_version
        if windows_os_version is not None:
            self.windows_os_version = windows_os_version
        if sensor_capabilities is not None:
            self.sensor_capabilities = sensor_capabilities

    @property
    def robot_id(self):
        """Gets the robot_id of this ApiDeviceResult.  # noqa: E501


        :return: The robot_id of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._robot_id

    @robot_id.setter
    def robot_id(self, robot_id):
        """Sets the robot_id of this ApiDeviceResult.


        :param robot_id: The robot_id of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._robot_id = robot_id

    @property
    def serial_number(self):
        """Gets the serial_number of this ApiDeviceResult.  # noqa: E501


        :return: The serial_number of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this ApiDeviceResult.


        :param serial_number: The serial_number of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._serial_number = serial_number

    @property
    def current_profile_name(self):
        """Gets the current_profile_name of this ApiDeviceResult.  # noqa: E501


        :return: The current_profile_name of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._current_profile_name

    @current_profile_name.setter
    def current_profile_name(self, current_profile_name):
        """Sets the current_profile_name of this ApiDeviceResult.


        :param current_profile_name: The current_profile_name of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._current_profile_name = current_profile_name

    @property
    def hardware_info(self):
        """Gets the hardware_info of this ApiDeviceResult.  # noqa: E501


        :return: The hardware_info of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._hardware_info

    @hardware_info.setter
    def hardware_info(self, hardware_info):
        """Sets the hardware_info of this ApiDeviceResult.


        :param hardware_info: The hardware_info of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._hardware_info = hardware_info

    @property
    def ip_address(self):
        """Gets the ip_address of this ApiDeviceResult.  # noqa: E501


        :return: The ip_address of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this ApiDeviceResult.


        :param ip_address: The ip_address of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._ip_address = ip_address

    @property
    def battery_level(self):
        """Gets the battery_level of this ApiDeviceResult.  # noqa: E501


        :return: The battery_level of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._battery_level

    @battery_level.setter
    def battery_level(self, battery_level):
        """Sets the battery_level of this ApiDeviceResult.


        :param battery_level: The battery_level of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._battery_level = battery_level

    @property
    def occipital_device_info(self):
        """Gets the occipital_device_info of this ApiDeviceResult.  # noqa: E501


        :return: The occipital_device_info of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._occipital_device_info

    @occipital_device_info.setter
    def occipital_device_info(self, occipital_device_info):
        """Sets the occipital_device_info of this ApiDeviceResult.


        :param occipital_device_info: The occipital_device_info of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._occipital_device_info = occipital_device_info

    @property
    def output_capabilities(self):
        """Gets the output_capabilities of this ApiDeviceResult.  # noqa: E501


        :return: The output_capabilities of this ApiDeviceResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._output_capabilities

    @output_capabilities.setter
    def output_capabilities(self, output_capabilities):
        """Sets the output_capabilities of this ApiDeviceResult.


        :param output_capabilities: The output_capabilities of this ApiDeviceResult.  # noqa: E501
        :type: list[object]
        """

        self._output_capabilities = output_capabilities

    @property
    def robot_version(self):
        """Gets the robot_version of this ApiDeviceResult.  # noqa: E501


        :return: The robot_version of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._robot_version

    @robot_version.setter
    def robot_version(self, robot_version):
        """Sets the robot_version of this ApiDeviceResult.


        :param robot_version: The robot_version of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._robot_version = robot_version

    @property
    def sensory_service_app_version(self):
        """Gets the sensory_service_app_version of this ApiDeviceResult.  # noqa: E501


        :return: The sensory_service_app_version of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._sensory_service_app_version

    @sensory_service_app_version.setter
    def sensory_service_app_version(self, sensory_service_app_version):
        """Sets the sensory_service_app_version of this ApiDeviceResult.


        :param sensory_service_app_version: The sensory_service_app_version of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._sensory_service_app_version = sensory_service_app_version

    @property
    def windows_os_version(self):
        """Gets the windows_os_version of this ApiDeviceResult.  # noqa: E501


        :return: The windows_os_version of this ApiDeviceResult.  # noqa: E501
        :rtype: object
        """
        return self._windows_os_version

    @windows_os_version.setter
    def windows_os_version(self, windows_os_version):
        """Sets the windows_os_version of this ApiDeviceResult.


        :param windows_os_version: The windows_os_version of this ApiDeviceResult.  # noqa: E501
        :type: object
        """

        self._windows_os_version = windows_os_version

    @property
    def sensor_capabilities(self):
        """Gets the sensor_capabilities of this ApiDeviceResult.  # noqa: E501


        :return: The sensor_capabilities of this ApiDeviceResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._sensor_capabilities

    @sensor_capabilities.setter
    def sensor_capabilities(self, sensor_capabilities):
        """Sets the sensor_capabilities of this ApiDeviceResult.


        :param sensor_capabilities: The sensor_capabilities of this ApiDeviceResult.  # noqa: E501
        :type: list[object]
        """

        self._sensor_capabilities = sensor_capabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiDeviceResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiDeviceResult):
            return True

        return self.to_dict() != other.to_dict()
