/* 
 * Misty API
 *
 * Misty Open API
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ApiDeviceResult
    /// </summary>
    [DataContract]
    public partial class ApiDeviceResult :  IEquatable<ApiDeviceResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApiDeviceResult" /> class.
        /// </summary>
        /// <param name="robotId">robotId.</param>
        /// <param name="serialNumber">serialNumber.</param>
        /// <param name="currentProfileName">currentProfileName.</param>
        /// <param name="hardwareInfo">hardwareInfo.</param>
        /// <param name="ipAddress">ipAddress.</param>
        /// <param name="batteryLevel">batteryLevel.</param>
        /// <param name="occipitalDeviceInfo">occipitalDeviceInfo.</param>
        /// <param name="outputCapabilities">outputCapabilities.</param>
        /// <param name="robotVersion">robotVersion.</param>
        /// <param name="sensoryServiceAppVersion">sensoryServiceAppVersion.</param>
        /// <param name="windowsOSVersion">windowsOSVersion.</param>
        /// <param name="sensorCapabilities">sensorCapabilities.</param>
        public ApiDeviceResult(Object robotId = default(Object), Object serialNumber = default(Object), Object currentProfileName = default(Object), Object hardwareInfo = default(Object), Object ipAddress = default(Object), Object batteryLevel = default(Object), Object occipitalDeviceInfo = default(Object), List<Object> outputCapabilities = default(List<Object>), Object robotVersion = default(Object), Object sensoryServiceAppVersion = default(Object), Object windowsOSVersion = default(Object), List<Object> sensorCapabilities = default(List<Object>))
        {
            this.RobotId = robotId;
            this.SerialNumber = serialNumber;
            this.CurrentProfileName = currentProfileName;
            this.HardwareInfo = hardwareInfo;
            this.IpAddress = ipAddress;
            this.BatteryLevel = batteryLevel;
            this.OccipitalDeviceInfo = occipitalDeviceInfo;
            this.OutputCapabilities = outputCapabilities;
            this.RobotVersion = robotVersion;
            this.SensoryServiceAppVersion = sensoryServiceAppVersion;
            this.WindowsOSVersion = windowsOSVersion;
            this.SensorCapabilities = sensorCapabilities;
        }
        
        /// <summary>
        /// Gets or Sets RobotId
        /// </summary>
        [DataMember(Name="robotId", EmitDefaultValue=false)]
        public Object RobotId { get; set; }

        /// <summary>
        /// Gets or Sets SerialNumber
        /// </summary>
        [DataMember(Name="serialNumber", EmitDefaultValue=false)]
        public Object SerialNumber { get; set; }

        /// <summary>
        /// Gets or Sets CurrentProfileName
        /// </summary>
        [DataMember(Name="currentProfileName", EmitDefaultValue=false)]
        public Object CurrentProfileName { get; set; }

        /// <summary>
        /// Gets or Sets HardwareInfo
        /// </summary>
        [DataMember(Name="hardwareInfo", EmitDefaultValue=false)]
        public Object HardwareInfo { get; set; }

        /// <summary>
        /// Gets or Sets IpAddress
        /// </summary>
        [DataMember(Name="ipAddress", EmitDefaultValue=false)]
        public Object IpAddress { get; set; }

        /// <summary>
        /// Gets or Sets BatteryLevel
        /// </summary>
        [DataMember(Name="batteryLevel", EmitDefaultValue=false)]
        public Object BatteryLevel { get; set; }

        /// <summary>
        /// Gets or Sets OccipitalDeviceInfo
        /// </summary>
        [DataMember(Name="occipitalDeviceInfo", EmitDefaultValue=false)]
        public Object OccipitalDeviceInfo { get; set; }

        /// <summary>
        /// Gets or Sets OutputCapabilities
        /// </summary>
        [DataMember(Name="outputCapabilities", EmitDefaultValue=false)]
        public List<Object> OutputCapabilities { get; set; }

        /// <summary>
        /// Gets or Sets RobotVersion
        /// </summary>
        [DataMember(Name="robotVersion", EmitDefaultValue=false)]
        public Object RobotVersion { get; set; }

        /// <summary>
        /// Gets or Sets SensoryServiceAppVersion
        /// </summary>
        [DataMember(Name="sensoryServiceAppVersion", EmitDefaultValue=false)]
        public Object SensoryServiceAppVersion { get; set; }

        /// <summary>
        /// Gets or Sets WindowsOSVersion
        /// </summary>
        [DataMember(Name="windowsOSVersion", EmitDefaultValue=false)]
        public Object WindowsOSVersion { get; set; }

        /// <summary>
        /// Gets or Sets SensorCapabilities
        /// </summary>
        [DataMember(Name="sensorCapabilities", EmitDefaultValue=false)]
        public List<Object> SensorCapabilities { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiDeviceResult {\n");
            sb.Append("  RobotId: ").Append(RobotId).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("  CurrentProfileName: ").Append(CurrentProfileName).Append("\n");
            sb.Append("  HardwareInfo: ").Append(HardwareInfo).Append("\n");
            sb.Append("  IpAddress: ").Append(IpAddress).Append("\n");
            sb.Append("  BatteryLevel: ").Append(BatteryLevel).Append("\n");
            sb.Append("  OccipitalDeviceInfo: ").Append(OccipitalDeviceInfo).Append("\n");
            sb.Append("  OutputCapabilities: ").Append(OutputCapabilities).Append("\n");
            sb.Append("  RobotVersion: ").Append(RobotVersion).Append("\n");
            sb.Append("  SensoryServiceAppVersion: ").Append(SensoryServiceAppVersion).Append("\n");
            sb.Append("  WindowsOSVersion: ").Append(WindowsOSVersion).Append("\n");
            sb.Append("  SensorCapabilities: ").Append(SensorCapabilities).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApiDeviceResult);
        }

        /// <summary>
        /// Returns true if ApiDeviceResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ApiDeviceResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiDeviceResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RobotId == input.RobotId ||
                    (this.RobotId != null &&
                    this.RobotId.Equals(input.RobotId))
                ) && 
                (
                    this.SerialNumber == input.SerialNumber ||
                    (this.SerialNumber != null &&
                    this.SerialNumber.Equals(input.SerialNumber))
                ) && 
                (
                    this.CurrentProfileName == input.CurrentProfileName ||
                    (this.CurrentProfileName != null &&
                    this.CurrentProfileName.Equals(input.CurrentProfileName))
                ) && 
                (
                    this.HardwareInfo == input.HardwareInfo ||
                    (this.HardwareInfo != null &&
                    this.HardwareInfo.Equals(input.HardwareInfo))
                ) && 
                (
                    this.IpAddress == input.IpAddress ||
                    (this.IpAddress != null &&
                    this.IpAddress.Equals(input.IpAddress))
                ) && 
                (
                    this.BatteryLevel == input.BatteryLevel ||
                    (this.BatteryLevel != null &&
                    this.BatteryLevel.Equals(input.BatteryLevel))
                ) && 
                (
                    this.OccipitalDeviceInfo == input.OccipitalDeviceInfo ||
                    (this.OccipitalDeviceInfo != null &&
                    this.OccipitalDeviceInfo.Equals(input.OccipitalDeviceInfo))
                ) && 
                (
                    this.OutputCapabilities == input.OutputCapabilities ||
                    this.OutputCapabilities != null &&
                    input.OutputCapabilities != null &&
                    this.OutputCapabilities.SequenceEqual(input.OutputCapabilities)
                ) && 
                (
                    this.RobotVersion == input.RobotVersion ||
                    (this.RobotVersion != null &&
                    this.RobotVersion.Equals(input.RobotVersion))
                ) && 
                (
                    this.SensoryServiceAppVersion == input.SensoryServiceAppVersion ||
                    (this.SensoryServiceAppVersion != null &&
                    this.SensoryServiceAppVersion.Equals(input.SensoryServiceAppVersion))
                ) && 
                (
                    this.WindowsOSVersion == input.WindowsOSVersion ||
                    (this.WindowsOSVersion != null &&
                    this.WindowsOSVersion.Equals(input.WindowsOSVersion))
                ) && 
                (
                    this.SensorCapabilities == input.SensorCapabilities ||
                    this.SensorCapabilities != null &&
                    input.SensorCapabilities != null &&
                    this.SensorCapabilities.SequenceEqual(input.SensorCapabilities)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RobotId != null)
                    hashCode = hashCode * 59 + this.RobotId.GetHashCode();
                if (this.SerialNumber != null)
                    hashCode = hashCode * 59 + this.SerialNumber.GetHashCode();
                if (this.CurrentProfileName != null)
                    hashCode = hashCode * 59 + this.CurrentProfileName.GetHashCode();
                if (this.HardwareInfo != null)
                    hashCode = hashCode * 59 + this.HardwareInfo.GetHashCode();
                if (this.IpAddress != null)
                    hashCode = hashCode * 59 + this.IpAddress.GetHashCode();
                if (this.BatteryLevel != null)
                    hashCode = hashCode * 59 + this.BatteryLevel.GetHashCode();
                if (this.OccipitalDeviceInfo != null)
                    hashCode = hashCode * 59 + this.OccipitalDeviceInfo.GetHashCode();
                if (this.OutputCapabilities != null)
                    hashCode = hashCode * 59 + this.OutputCapabilities.GetHashCode();
                if (this.RobotVersion != null)
                    hashCode = hashCode * 59 + this.RobotVersion.GetHashCode();
                if (this.SensoryServiceAppVersion != null)
                    hashCode = hashCode * 59 + this.SensoryServiceAppVersion.GetHashCode();
                if (this.WindowsOSVersion != null)
                    hashCode = hashCode * 59 + this.WindowsOSVersion.GetHashCode();
                if (this.SensorCapabilities != null)
                    hashCode = hashCode * 59 + this.SensorCapabilities.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
