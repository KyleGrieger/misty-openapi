/* 
 * Misty API
 *
 * Misty Open API
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineObject3
    /// </summary>
    [DataContract]
    public partial class InlineObject3 :  IEquatable<InlineObject3>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject3" /> class.
        /// </summary>
        /// <param name="linearVelocity">linearVelocity.</param>
        /// <param name="angularVelocity">angularVelocity.</param>
        /// <param name="timeMS">timeMS.</param>
        public InlineObject3(Object linearVelocity = default(Object), Object angularVelocity = default(Object), Object timeMS = default(Object))
        {
            this.LinearVelocity = linearVelocity;
            this.AngularVelocity = angularVelocity;
            this.TimeMS = timeMS;
        }
        
        /// <summary>
        /// Gets or Sets LinearVelocity
        /// </summary>
        [DataMember(Name="LinearVelocity", EmitDefaultValue=false)]
        public Object LinearVelocity { get; set; }

        /// <summary>
        /// Gets or Sets AngularVelocity
        /// </summary>
        [DataMember(Name="AngularVelocity", EmitDefaultValue=false)]
        public Object AngularVelocity { get; set; }

        /// <summary>
        /// Gets or Sets TimeMS
        /// </summary>
        [DataMember(Name="TimeMS", EmitDefaultValue=false)]
        public Object TimeMS { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject3 {\n");
            sb.Append("  LinearVelocity: ").Append(LinearVelocity).Append("\n");
            sb.Append("  AngularVelocity: ").Append(AngularVelocity).Append("\n");
            sb.Append("  TimeMS: ").Append(TimeMS).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject3);
        }

        /// <summary>
        /// Returns true if InlineObject3 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject3 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject3 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LinearVelocity == input.LinearVelocity ||
                    (this.LinearVelocity != null &&
                    this.LinearVelocity.Equals(input.LinearVelocity))
                ) && 
                (
                    this.AngularVelocity == input.AngularVelocity ||
                    (this.AngularVelocity != null &&
                    this.AngularVelocity.Equals(input.AngularVelocity))
                ) && 
                (
                    this.TimeMS == input.TimeMS ||
                    (this.TimeMS != null &&
                    this.TimeMS.Equals(input.TimeMS))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LinearVelocity != null)
                    hashCode = hashCode * 59 + this.LinearVelocity.GetHashCode();
                if (this.AngularVelocity != null)
                    hashCode = hashCode * 59 + this.AngularVelocity.GetHashCode();
                if (this.TimeMS != null)
                    hashCode = hashCode * 59 + this.TimeMS.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
