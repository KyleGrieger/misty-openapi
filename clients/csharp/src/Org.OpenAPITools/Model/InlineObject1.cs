/* 
 * Misty API
 *
 * Misty Open API
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InlineObject1
    /// </summary>
    [DataContract]
    public partial class InlineObject1 :  IEquatable<InlineObject1>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InlineObject1" /> class.
        /// </summary>
        /// <param name="rightTrackSpeed">rightTrackSpeed.</param>
        /// <param name="leftTrackSpeed">leftTrackSpeed.</param>
        public InlineObject1(Object rightTrackSpeed = default(Object), Object leftTrackSpeed = default(Object))
        {
            this.RightTrackSpeed = rightTrackSpeed;
            this.LeftTrackSpeed = leftTrackSpeed;
        }
        
        /// <summary>
        /// Gets or Sets RightTrackSpeed
        /// </summary>
        [DataMember(Name="RightTrackSpeed", EmitDefaultValue=false)]
        public Object RightTrackSpeed { get; set; }

        /// <summary>
        /// Gets or Sets LeftTrackSpeed
        /// </summary>
        [DataMember(Name="LeftTrackSpeed", EmitDefaultValue=false)]
        public Object LeftTrackSpeed { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineObject1 {\n");
            sb.Append("  RightTrackSpeed: ").Append(RightTrackSpeed).Append("\n");
            sb.Append("  LeftTrackSpeed: ").Append(LeftTrackSpeed).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InlineObject1);
        }

        /// <summary>
        /// Returns true if InlineObject1 instances are equal
        /// </summary>
        /// <param name="input">Instance of InlineObject1 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineObject1 input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.RightTrackSpeed == input.RightTrackSpeed ||
                    (this.RightTrackSpeed != null &&
                    this.RightTrackSpeed.Equals(input.RightTrackSpeed))
                ) && 
                (
                    this.LeftTrackSpeed == input.LeftTrackSpeed ||
                    (this.LeftTrackSpeed != null &&
                    this.LeftTrackSpeed.Equals(input.LeftTrackSpeed))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.RightTrackSpeed != null)
                    hashCode = hashCode * 59 + this.RightTrackSpeed.GetHashCode();
                if (this.LeftTrackSpeed != null)
                    hashCode = hashCode * 59 + this.LeftTrackSpeed.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
